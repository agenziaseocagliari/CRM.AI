const fs = require('fs');
const path = require('path');

const filePath = path.join(__dirname, 'src', 'components', 'JWTViewer.tsx');
let content = fs.readFileSync(filePath, 'utf8');

console.log('üîç Analyzing JWTViewer.tsx for corrupted characters...');

// Byte-level replacements for corrupted characters
const fixes = [
  // Super Admin emoji - corrupted "√∞≈∏"" to "üîç"
  { from: /√∞≈∏" Super Admin/g, to: 'üîç Super Admin', name: 'Super Admin emoji' },
  
  // User emoji - corrupted "√∞≈∏'¬§" to "üë§"  
  { from: /√∞≈∏'¬§ Utente Standard/g, to: 'üë§ Utente Standard', name: 'User emoji' },
  
  // Clipboard emoji - corrupted "√∞≈∏"‚Äπ" to "üìã"
  { from: /√∞≈∏"‚Äπ/g, to: 'üìã', name: 'Clipboard emoji' },
  
  // Admin tools emoji - corrupted ""≈°‚Ñ¢√Ø¬∏" to "‚öôÔ∏è"
  { from: /"≈°‚Ñ¢√Ø¬∏ Admin/g, to: '‚öôÔ∏è Admin', name: 'Admin tools emoji' },
  
  // Warning emoji - corrupted ""≈° √Ø¬∏" to "‚ö†Ô∏è"
  { from: /"≈° √Ø¬∏ TOKEN DEFECT/g, to: '‚ö†Ô∏è TOKEN DEFECT', name: 'Warning emoji' },
  
  // Cross mark - corrupted ""≈í" to "‚ùå"
  { from: /"≈í No/g, to: '‚ùå No', name: 'Cross mark' },
  
  // Arrow - corrupted "‚Ä†'" to "‚Üí"
  { from: /Logout "‚Ä†'/g, to: 'Logout ‚Üí', name: 'Arrow symbol' }
];

let fixCount = 0;
fixes.forEach(fix => {
  const beforeCount = (content.match(fix.from) || []).length;
  content = content.replace(fix.from, fix.to);
  const afterCount = (content.match(fix.from) || []).length;
  const replacements = beforeCount - afterCount;
  
  if (replacements > 0) {
    console.log(`‚úÖ Fixed ${fix.name}: ${replacements} replacements`);
    fixCount += replacements;
  }
});

if (fixCount > 0) {
  fs.writeFileSync(filePath, content, 'utf8');
  console.log(`\nüéâ Successfully applied ${fixCount} character fixes to JWTViewer.tsx!`);
} else {
  console.log('\nüîç No corrupted characters found to fix.');
}

// Verify the fixes
console.log('\nüîç Verifying fixes...');
const verifyContent = fs.readFileSync(filePath, 'utf8');
const stillCorrupted = [
  /√∞≈∏[^üîç]/g,
  /"[≈°≈í‚Ä†]/g,
  /[√∞√±√≤]/g
];

let remainingIssues = 0;
stillCorrupted.forEach((pattern, i) => {
  const matches = verifyContent.match(pattern) || [];
  if (matches.length > 0) {
    console.log(`‚ö†Ô∏è Pattern ${i+1} still has ${matches.length} issues:`, matches);
    remainingIssues += matches.length;
  }
});

if (remainingIssues === 0) {
  console.log('‚úÖ All character corruptions appear to be fixed!');
} else {
  console.log(`‚ö†Ô∏è ${remainingIssues} corrupted characters still remain`);
}