// File: supabase/functions/generate-analytics-insights/index.ts

declare const Deno: {
  env: {
    get(key: string): string | undefined;
  };
};

import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.43.4";
import { GoogleGenAI, GenerateContentResponse } from "https://esm.sh/@google/genai@1.19.0";
import { corsHeaders, handleCors } from "../_shared/cors.ts";

const ACTION_TYPE = 'ai_analytics_insights';

serve(async (req) => {
  const corsResponse = handleCors(req);
  if (corsResponse) return corsResponse;

  try {
    const { prompt, data_context, organization_id } = await req.json();

    if (!prompt) {
      throw new Error("Il campo 'prompt' è obbligatorio per l'analisi.");
    }

    const supabaseUrl = Deno.env.get("SUPABASE_URL");
    const serviceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    if (!supabaseUrl || !serviceRoleKey) {
      throw new Error("Configurazione Supabase mancante nei secrets.");
    }
    const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

    // --- Integrazione Sistema Crediti ---
    const creditResponse = await supabaseAdmin.functions.invoke('consume-credits', {
      body: { 
        organization_id, 
        action_type: ACTION_TYPE,
        credits_required: 2 // Analytics insights costano 2 crediti
      }
    });
    
    const { data: creditData, error: creditError } = creditResponse;
    if (creditError) throw new Error(`Errore di rete nella verifica dei crediti: ${creditError.message}`);
    if (creditData.error) throw new Error(`Errore nella verifica dei crediti: ${creditData.error}`);
    if (!creditData.success) throw new Error("Crediti insufficienti per generare insights analitici.");
    console.log(`[${ACTION_TYPE}] Crediti verificati. Rimanenti: ${creditData.remaining_credits}`);
    // --- Fine Integrazione ---

    const geminiApiKey = Deno.env.get("GEMINI_API_KEY");
    if (!geminiApiKey) {
      throw new Error("La variabile d'ambiente GEMINI_API_KEY non è stata impostata nei secrets di Supabase.");
    }

    const ai = new GoogleGenAI({ apiKey: geminiApiKey });
    const fullPrompt = `
      Sei un Analista AI specializzato in Business Intelligence per un CRM chiamato Guardian AI.
      Il tuo compito è analizzare i dati forniti e generare insights predittivi e raccomandazioni strategiche.
      
      Contesto Dati:
      ${JSON.stringify(data_context, null, 2)}
      
      Richiesta di Analisi:
      ${prompt}
      
      Fornisci:
      1. Predizioni basate sui trend attuali
      2. Insights chiave sui performance patterns
      3. Raccomandazioni strategiche specifiche
      4. Opportunità di crescita identificate
      5. Risk factors da monitorare
      
      Rispondi in formato JSON con questa struttura:
      {
        "predictions": [
          {
            "metric": "Nome metrica",
            "current_value": "Valore attuale",
            "predicted_value": "Valore predetto",
            "timeframe": "Timeframe previsione",
            "confidence": "Livello confidenza (0-100)"
          }
        ],
        "insights": [
          {
            "category": "Categoria insight",
            "description": "Descrizione dettagliata",
            "impact": "Alto/Medio/Basso",
            "data_points": ["Punti dati supportanti"]
          }
        ],
        "recommendations": [
          {
            "action": "Azione raccomandata",
            "priority": "Alta/Media/Bassa",
            "expected_impact": "Impatto atteso",
            "implementation_time": "Tempo implementazione"
          }
        ],
        "opportunities": [
          {
            "title": "Titolo opportunità",
            "description": "Descrizione",
            "potential_value": "Valore potenziale",
            "required_actions": ["Azioni necessarie"]
          }
        ],
        "risks": [
          {
            "risk": "Descrizione rischio",
            "probability": "Probabilità (0-100)",
            "impact": "Impatto se si verifica",
            "mitigation": "Strategia mitigazione"
          }
        ]
      }
    `;

    const response: GenerateContentResponse = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: fullPrompt,
    });
    
    const generatedText = response.text.trim();
    if (!generatedText) {
        throw new Error("L'API di Gemini ha restituito un risultato vuoto.");
    }

    // Try to parse as JSON, fallback to text response
    let analysisResult;
    try {
      analysisResult = JSON.parse(generatedText);
    } catch {
      // If JSON parsing fails, structure the text response
      analysisResult = {
        predictions: [],
        insights: [{ 
          category: "AI Analysis", 
          description: generatedText, 
          impact: "Medium",
          data_points: ["Generated by Gemini AI"] 
        }],
        recommendations: [{ 
          action: "Review AI analysis and implement suggestions", 
          priority: "Media",
          expected_impact: "Positive business impact",
          implementation_time: "1-2 weeks"
        }],
        opportunities: [],
        risks: []
      };
    }

    return new Response(JSON.stringify(analysisResult), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });

  } catch (error) {
    console.error("Errore nella funzione generate-analytics-insights:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});