name: Deploy to Supabase

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint-and-typecheck:
    name: Lint and TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript lint
        run: npm run lint

      - name: Verify PostgreSQL role references
        run: bash scripts/verify-role-cleanup.sh

      - name: Verify API role usage
        run: npm run verify:role

      - name: Lint for API role patterns
        run: npm run lint:role

  deploy-edge-functions:
    name: Deploy Edge Functions to Supabase
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy Edge Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          # Link to Supabase project
          supabase link --project-ref $SUPABASE_PROJECT_ID
          
          # Deploy all edge functions
          echo "Deploying edge functions..."
          supabase functions deploy --no-verify-jwt
          
          echo "✅ Edge functions deployed successfully!"

  # DISABILITATO PERMANENTEMENTE - Migrations out-of-order causano fallimenti
  # Gestire migrations manualmente via Supabase Dashboard SQL Editor
  # sync-database-migrations:
  #   name: Sync Database Migrations
  #   runs-on: ubuntu-latest
  #   needs: lint-and-typecheck
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Supabase CLI
  #       uses: supabase/setup-cli@v1
  #       with:
  #         version: latest

  #     - name: Run Migrations
  #       env:
  #         SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  #         SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  #         SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  #       run: |
  #         # Link to Supabase project
  #         supabase link --project-ref $SUPABASE_PROJECT_ID
  #         
  #         # Push migrations to remote database
  #         # Using --include-all to apply migrations even if their dates are earlier than already-applied migrations
  #         # This is necessary for migrations like 20250102000000_create_agents_and_integrations.sql
  #         echo "Pushing database migrations with --include-all flag..."
  #         supabase db push --include-all
  #         
  #         echo "✅ Database migrations synced successfully!"

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-edge-functions]  # REMOVED sync-database-migrations dependency
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Edge Functions
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          echo "Verifying edge functions deployment..."
          
          # Test a simple edge function
          response=$(curl -s -w "\n%{http_code}" \
            -X POST "$SUPABASE_URL/functions/v1/test-org-settings" \
            -H "apikey: $SUPABASE_ANON_KEY" \
            -H "Content-Type: application/json" \
            -d '{}' || echo "000")
          
          http_code=$(echo "$response" | tail -n 1)
          
          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 500 ]; then
            echo "✅ Edge functions are responding (HTTP $http_code)"
          else
            echo "⚠️ Edge functions health check returned HTTP $http_code"
            echo "Response: $response"
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run npm audit
        run: |
          npm audit --production || true
          
      - name: Check for secrets in code
        run: |
          echo "Checking for accidentally committed secrets..."
          
          # Check for common secret patterns
          if grep -r -E "(api[_-]?key|password|secret|token|credential).*=.*['\"][a-zA-Z0-9]{20,}['\"]" \
             --exclude-dir=node_modules \
             --exclude-dir=.git \
             --exclude="*.lock" \
             --exclude="deploy-supabase.yml" \
             . 2>/dev/null; then
            echo "⚠️ WARNING: Potential secrets found in code!"
            echo "Please review the files above and ensure no real secrets are committed."
            exit 1
          else
            echo "✅ No obvious secrets detected in code"
          fi
