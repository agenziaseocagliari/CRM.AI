name: Deploy to Supabase
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Check required secrets
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          missing=0
          for var in SUPABASE_ACCESS_TOKEN SUPABASE_PROJECT_ID SUPABASE_DB_PASSWORD; do
            if [ -z "${!var}" ]; then
              echo "❌ Secret $var mancante! Configura i secrets in GitHub repository settings."
              missing=1
            fi
          done
          if [ "$missing" -eq 1 ]; then exit 1; fi
      - name: Verify package-lock.json
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "package-lock.json non trovato. Esegui npm install in locale e fai push!"
            exit 1
          fi
      - name: Install dependencies
        run: npm ci
      - name: Run Lint
        run: npm run lint
      - name: Run Tests
        run: npm test
        continue-on-error: true
      - name: Install Supabase CLI
        run: npm install supabase --save-dev
      - name: Deploy Supabase (Edge Functions & Migrations)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: deploy_to_supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          set -o pipefail
          {
            echo "--- Deploying Edge Functions ---"
            npx supabase functions deploy
            echo "--- Deploying Database Migrations ---"
            npx supabase db push
          } 2>&1 | tee deploy.log
      - name: Check Deploy Status
        if: success() && steps.deploy_to_supabase.conclusion == 'success'
        run: echo "✅ Deploy completato!"
      - name: Report Deploy Failure
        if: failure() || steps.deploy_to_supabase.conclusion == 'failure'
        run: |
          echo "❌ Deploy fallito: controlla i logs nell'artefatto 'supabase-deploy-logs'."
          exit 1
      - name: Upload Deploy Logs
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: supabase-deploy-logs
          path: deploy.log

on:name: Deploy to Supabase

  push:on:

    branches:  push:

      - main    branches:

  pull_request:      - main

    branches:  pull_request:

      - main    branches:

jobs:      - main

  build_and_deploy:


    steps:  build_and_deploy:

      - name: Checkout repository    runs-on: ubuntu-latest

        uses: actions/checkout@v4    steps:

      - name: Setup Node.js      - name: Checkout repository

        uses: actions/setup-node@v4        uses: actions/checkout@v4

        with:      - name: Setup Node.js

          node-version: 20        uses: actions/setup-node@v4

          cache: 'npm'        with:

      - name: Check required secrets          node-version: 20

        env:          cache: 'npm'

          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}      - name: Check required secrets

          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}        env:

          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

        run: |          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

          missing=0          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

          for var in SUPABASE_ACCESS_TOKEN SUPABASE_PROJECT_ID SUPABASE_DB_PASSWORD; do        run: |

            if [ -z "${!var}" ]; then          missing=0

              echo "❌ Secret $var mancante! Configura i secrets in GitHub repository settings."          for var in SUPABASE_ACCESS_TOKEN SUPABASE_PROJECT_ID SUPABASE_DB_PASSWORD; do

              missing=1            if [ -z "${!var}" ]; then

            fi              echo "❌ Secret $var mancante! Configura i secrets in GitHub repository settings."

          done              missing=1

          if [ "$missing" -eq 1 ]; then exit 1; fi            fi

      - name: Verify package-lock.json          done

        run: |          if [ "$missing" -eq 1 ]; then exit 1; fi

          if [ ! -f "package-lock.json" ]; then      - name: Verify package-lock.json

            echo "package-lock.json non trovato. Esegui npm install in locale e fai push!"        run: |

            exit 1          if [ ! -f "package-lock.json" ]; then

          fi            echo "package-lock.json non trovato. Esegui npm install in locale e fai push!"

      - name: Install dependencies            exit 1

        run: npm ci          fi

      - name: Run Lint      - name: Install dependencies

        run: npm run lint        run: npm ci

      - name: Run Tests      - name: Run Lint

        run: npm test        run: npm run lint

        continue-on-error: true      - name: Run Tests

      - name: Install Supabase CLI        run: npm test

        run: npm install supabase --save-dev        continue-on-error: true

      - name: Deploy Supabase (Edge Functions & Migrations)      - name: Install Supabase CLI

        if: github.event_name == 'push' && github.ref == 'refs/heads/main'        run: npm install supabase --save-dev

        id: deploy_to_supabase      - name: Deploy Supabase (Edge Functions & Migrations)

        env:        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}        id: deploy_to_supabase

          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}        env:

          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

        run: |          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

          set -o pipefail          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

          {        run: |

            echo "--- Deploying Edge Functions ---"          set -o pipefail

            npx supabase functions deploy          {

            echo "--- Deploying Database Migrations ---"            echo "--- Deploying Edge Functions ---"

            npx supabase db push            npx supabase functions deploy

          } 2>&1 | tee deploy.log            echo "--- Deploying Database Migrations ---"

      - name: Check Deploy Status            npx supabase db push

        if: success() && steps.deploy_to_supabase.conclusion == 'success'          } 2>&1 | tee deploy.log

        run: echo "✅ Deploy completato!"      - name: Check Deploy Status

      - name: Report Deploy Failure        if: success() && steps.deploy_to_supabase.conclusion == 'success'

        if: failure() || steps.deploy_to_supabase.conclusion == 'failure'        run: echo "✅ Deploy completato!"

        run: |      - name: Report Deploy Failure

          echo "❌ Deploy fallito: controlla i logs nell'artefatto 'supabase-deploy-logs'."        if: failure() || steps.deploy_to_supabase.conclusion == 'failure'

          exit 1        run: |

      - name: Upload Deploy Logs          echo "❌ Deploy fallito: controlla i logs nell'artefatto 'supabase-deploy-logs'."

        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'          exit 1

        uses: actions/upload-artifact@v4      - name: Upload Deploy Logs

        with:        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

          name: supabase-deploy-logs        uses: actions/upload-artifact@v4

          path: deploy.log        with:

          name: supabase-deploy-logs
          path: deploy.log

name: Deploy to Supabase
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Check required secrets
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          missing=0
          for var in SUPABASE_ACCESS_TOKEN SUPABASE_PROJECT_ID SUPABASE_DB_PASSWORD; do
            if [ -z "${!var}" ]; then
              echo "❌ Secret $var mancante! Configura i secrets in GitHub repository settings."
              missing=1
            fi
          done
          if [ "$missing" -eq 1 ]; then exit 1; fi
      - name: Verify package-lock.json
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "package-lock.json non trovato. Esegui npm install in locale e fai push!"
            exit 1
          fi
      - name: Install dependencies
        run: npm ci
      - name: Run Lint
        run: npm run lint
      - name: Run Tests
        run: npm test
        continue-on-error: true
      - name: Install Supabase CLI
        run: npm install supabase --save-dev
      - name: Deploy Supabase (Edge Functions & Migrations)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: deploy_to_supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          set -o pipefail
          {
            echo "--- Deploying Edge Functions ---"
            npx supabase functions deploy
            echo "--- Deploying Database Migrations ---"
            npx supabase db push
          } 2>&1 | tee deploy.log
      - name: Check Deploy Status
        if: success() && steps.deploy_to_supabase.conclusion == 'success'
        run: echo "✅ Deploy completato!"
      - name: Report Deploy Failure
        if: failure() || steps.deploy_to_supabase.conclusion == 'failure'
        run: |
          echo "❌ Deploy fallito: controlla i logs nell'artefatto 'supabase-deploy-logs'."
          exit 1
      - name: Upload Deploy Logs
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: supabase-deploy-logs
          path: deploy.log
