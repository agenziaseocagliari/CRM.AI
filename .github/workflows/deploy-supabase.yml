name: Deploy to Supabase

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint-and-typecheck:
    name: Lint and TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Use npm install instead of npm ci for better compatibility
          # Retry logic for network resilience
          for attempt in 1 2 3; do
            echo "Attempt $attempt to install dependencies..."
            npm install --legacy-peer-deps --no-fund --no-audit && break
            if [ $attempt -lt 3 ]; then
              echo "Install failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

      - name: Run TypeScript lint
        run: npm run lint

      - name: Verify PostgreSQL role references
        run: bash scripts/verify-role-cleanup.sh

      - name: Audit Migration Idempotence
        run: bash scripts/audit-migration-idempotence.sh

      - name: Check Migration Versions
        run: bash scripts/check-migration-versions.sh

      - name: Verify API role usage
        run: npm run verify:role

      - name: Lint for API role patterns
        run: npm run lint:role

  # ✅ ENABLED: Unified Supabase Deployment (Edge Functions + Migrations)
  deploy-supabase:
    name: Deploy to Supabase (Edge Functions + Migrations)
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      SUPABASE_PROJECT_REF: qjtaqrlpronohgpfdxsi
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_URL: https://qjtaqrlpronohgpfdxsi.supabase.co
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install jq for migration sync
        run: |
          echo "Installing jq for JSON parsing..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq jq
          jq --version

      - name: Install curl (verify availability)
        run: |
          echo "Verifying curl availability..."
          curl --version

      - name: Make deployment script executable
        run: chmod +x scripts/deploy-supabase-robust.sh

      - name: Run Robust Deployment
        run: bash scripts/deploy-supabase-robust.sh
        env:
          SUPABASE_PROJECT_REF: qjtaqrlpronohgpfdxsi
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_URL: https://qjtaqrlpronohgpfdxsi.supabase.co

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Supabase Connection
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          echo "✅ Verifying Supabase connection..."
          
          # Test basic connectivity to Supabase
          response=$(curl -s -w "\n%{http_code}" \
            -X GET "$SUPABASE_URL/rest/v1/" \
            -H "apikey: $SUPABASE_ANON_KEY" \
            -H "Accept: application/json" || echo "000")
          
          http_code=$(echo "$response" | tail -n 1)
          
          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 400 ]; then
            echo "✅ Supabase API is responding (HTTP $http_code)"
          else
            echo "⚠️ Supabase health check returned HTTP $http_code"
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run npm audit
        run: |
          npm audit --production || true
          
      - name: Check for secrets in code
        run: |
          echo "Checking for accidentally committed secrets..."
          
          # Check for common secret patterns
          if grep -r -E "(api[_-]?key|password|secret|token|credential).*=.*['\"][a-zA-Z0-9]{20,}['\"]" \
             --exclude-dir=node_modules \
             --exclude-dir=.git \
             --exclude="*.lock" \
             --exclude="deploy-supabase.yml" \
             . 2>/dev/null; then
            echo "⚠️ WARNING: Potential secrets found in code!"
            echo "Please review the files above and ensure no real secrets are committed."
            exit 1
          else
            echo "✅ No obvious secrets detected in code"
          fi
