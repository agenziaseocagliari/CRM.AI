const fs = require('fs');
const path = require('path');

// List of files to clean
const filesToClean = [
  'src/components/superadmin/charts/MrrChart.tsx',
  'src/components/superadmin/charts/UserGrowthChart.tsx',
  'src/components/Dashboard.tsx',
  'src/components/Opportunities.tsx',
  'src/components/Settings.tsx',
  'src/components/ForgotPassword.tsx',
  'src/components/superadmin/SuperAdminLayout.tsx',
  'src/components/superadmin/SuperAdminHeader.tsx',
  'src/components/JWTViewer.tsx',
  'src/lib/ai/promptTemplates.ts',
  'src/components/superadmin/SystemHealthDashboard.tsx'
];

// Simple regex replacements
const replacements = [
  // Specific corrupted emoji patterns
  { from: /√∞≈∏'¬°/g, to: 'üí°' },
  { from: /√∞≈∏"¬•/g, to: 'üì•' },
  { from: /√∞≈∏"/g, to: 'üîç' },
  { from: /√∞≈∏"'/g, to: 'üîí' },
  { from: /√∞≈∏"¬ß/g, to: 'üîß' },
  { from: /√∞≈∏≈°¬´/g, to: 'üö´' },
  { from: /√∞≈∏"‚Äπ/g, to: 'üìã' },
  { from: /√∞≈∏'‚Äπ/g, to: 'üëã' },
  { from: /√∞≈∏≈í‚Ñ¢/g, to: 'üåô' },
  { from: /√∞≈∏'¬§/g, to: 'üë§' },
  { from: /√∞≈∏≈°¬®/g, to: 'üö®' },
  { from: /√∞≈∏"‚Äû/g, to: 'üîÑ' },
  { from: /√∞≈∏‚Ä∫/g, to: 'üõ°Ô∏è' },
  { from: /√¢Àú‚Ç¨√Ø¬∏/g, to: '‚òÄÔ∏è' },
  
  // Date fixes
  { from: /2024-01-15/g, to: '2025-01-15' },
  { from: /15\/01\/2024/g, to: '15/01/2025' }
];

console.log('üßπ Starting comprehensive character cleanup...');

filesToClean.forEach(filePath => {
  const fullPath = path.join(__dirname, filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ö†Ô∏è  File not found: ${filePath}`);
    return;
  }
  
  try {
    let content = fs.readFileSync(fullPath, 'utf8');
    let changed = false;
    let changeCount = 0;
    
    replacements.forEach(({ from, to }) => {
      const matches = content.match(from);
      if (matches) {
        content = content.replace(from, to);
        changed = true;
        changeCount += matches.length;
      }
    });
    
    if (changed) {
      fs.writeFileSync(fullPath, content, 'utf8');
      console.log(`‚úÖ Cleaned: ${filePath} (${changeCount} replacements)`);
    } else {
      console.log(`‚ÑπÔ∏è  No changes needed: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error.message);
  }
});

console.log('üéâ Comprehensive character cleanup completed!');