const fs = require('fs');
const path = require('path');

console.log('üöÄ STRATEGIA AVANZATA LIVELLO 3B: Correzione caratteri conservativa');

const filePath = path.join(__dirname, 'src', 'components', 'JWTViewer.tsx');

// Leggiamo il file come buffer per gestire i caratteri corrotti
let content = fs.readFileSync(filePath, 'utf8');

// Mappa dei caratteri corrotti con i loro sostituti corretti
const charMap = {
    // Caratteri corrotti emoji -> emoji corretti
    '√∞≈∏"': 'üîç',    // search emoji
    '√∞≈∏"‚Äπ': 'üìã',   // clipboard emoji  
    '√∞≈∏"‚Äû': 'üîÑ',   // reload emoji
    '√∞≈∏"'': 'üîë',   // key emoji
    '√∞≈∏'¬§': 'üë§',   // user emoji
    
    // Caratteri corrotti simboli -> simboli corretti
    '"≈í': '‚ùå',     // cross mark
    '"‚Ä†'': '‚Üí',     // arrow
    '"≈°‚Ñ¢√Ø¬∏': '‚öôÔ∏è', // gear/admin emoji
    '"≈° √Ø¬∏': '‚ö†Ô∏è', // warning emoji
    '"‚Äû¬π√Ø¬∏': '‚ÑπÔ∏è', // info emoji
    '√É‚Äî': '√ó',       // multiplication sign
};

console.log('üìù Analisi file corrente...');
let totalFixes = 0;

// Applicazione delle correzioni carattere per carattere
Object.entries(charMap).forEach(([corrupted, correct]) => {
    const occurrences = (content.match(new RegExp(escapeRegExp(corrupted), 'g')) || []).length;
    if (occurrences > 0) {
        content = content.replace(new RegExp(escapeRegExp(corrupted), 'g'), correct);
        console.log(`‚úÖ Corretto "${corrupted}" ‚Üí "${correct}" (${occurrences} volte)`);
        totalFixes += occurrences;
    }
});

// Helper function per escape dei caratteri speciali regex
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

if (totalFixes > 0) {
    // Scriviamo il file corretto
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`\nüéâ SUCCESSO: Applicate ${totalFixes} correzioni a JWTViewer.tsx`);
    
    // Verifica finale
    const verifyContent = fs.readFileSync(filePath, 'utf8');
    const remainingIssues = Object.keys(charMap).filter(corrupted => 
        verifyContent.includes(corrupted)
    );
    
    if (remainingIssues.length === 0) {
        console.log('‚úÖ PERFETTO: Tutti i caratteri corrotti sono stati eliminati!');
    } else {
        console.log(`‚ö†Ô∏è Rimangono ${remainingIssues.length} caratteri corrotti: ${remainingIssues.join(', ')}`);
    }
} else {
    console.log('‚ÑπÔ∏è Nessun carattere corrotto trovato nel file.');
}

console.log('\nüèÅ Strategia Livello 3B completata!');