const fs = require('fs');
const path = require('path');

console.log('üîß Starting safe JWT character fixes...');

const filePath = path.join('src', 'components', 'JWTViewer.tsx');

if (!fs.existsSync(filePath)) {
  console.log('‚ùå File not found:', filePath);
  process.exit(1);
}

// Read file with explicit UTF-8 encoding
let content = fs.readFileSync(filePath, 'utf8');

// Make backup
const backupPath = `${filePath}.backup-${Date.now()}`;
fs.writeFileSync(backupPath, content, 'utf8');
console.log('üíæ Backup created:', backupPath);

// Define replacements using Unicode code points for safety
const replacements = [
  // Title: √∞≈∏" ‚Üí üîç (search icon)
  { 
    pattern: /√∞≈∏"/g, 
    replacement: 'üîç', 
    name: 'search icon in title' 
  },
  // Super Admin role: √∞≈∏" ‚Üí üõ°Ô∏è (shield)
  { 
    pattern: /√∞≈∏" Super Admin/g, 
    replacement: 'üõ°Ô∏è Super Admin', 
    name: 'super admin shield' 
  },
  // Admin role: "≈°‚Ñ¢√Ø¬∏ ‚Üí ‚úÖ (checkmark)
  { 
    pattern: /"≈°‚Ñ¢√Ø¬∏ Admin/g, 
    replacement: '‚úÖ Admin', 
    name: 'admin checkmark' 
  },
  // User role: √∞≈∏'¬§ ‚Üí üë§ (user icon)
  { 
    pattern: /√∞≈∏'¬§ Utente/g, 
    replacement: 'üë§ Utente', 
    name: 'user icon' 
  },
  // Clipboard: √∞≈∏"‚Äπ ‚Üí üìã
  { 
    pattern: /√∞≈∏"‚Äπ/g, 
    replacement: 'üìã', 
    name: 'clipboard icon' 
  },
  // General checkmarks: "‚Ä¶ ‚Üí ‚úÖ
  { 
    pattern: /"‚Ä¶/g, 
    replacement: '‚úÖ', 
    name: 'checkmark symbols' 
  },
  // Warning symbols: "≈í ‚Üí ‚ö†Ô∏è
  { 
    pattern: /"≈í/g, 
    replacement: '‚ö†Ô∏è', 
    name: 'warning symbols' 
  }
];

let totalChanges = 0;
let originalContent = content;

// Apply replacements
replacements.forEach(({ pattern, replacement, name }) => {
  const matches = content.match(pattern);
  if (matches) {
    content = content.replace(pattern, replacement);
    console.log(`  ‚úÖ ${name}: ${matches.length} replacements`);
    totalChanges += matches.length;
  }
});

if (totalChanges > 0) {
  // Verify the content is still valid
  if (content.includes('export const JWTViewer') && content.length > originalContent.length * 0.9) {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`üéâ Successfully applied ${totalChanges} character fixes to JWTViewer.tsx!`);
    
    // Show a sample of the fixed content
    const titleMatch = content.match(/className="text-2xl font-bold">[^<]+/);
    if (titleMatch) {
      console.log('üìù Fixed title:', titleMatch[0].replace('className="text-2xl font-bold">', ''));
    }
  } else {
    console.log('‚ùå Content validation failed, restoring backup...');
    fs.writeFileSync(filePath, originalContent, 'utf8');
    process.exit(1);
  }
} else {
  console.log('‚ÑπÔ∏è  No corrupted characters found to fix');
}

console.log('‚ú® JWT character fix completed!');